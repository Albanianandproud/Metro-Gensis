# example usage:
## set_temp_variable = { amount_of_bullet_to_check = 100 }
## has_specific_amount_of_bullet = yes
has_specific_amount_of_bullet = {
	custom_trigger_tooltip = {
		tooltip = HAS_SPECIFIC_AMOUNT_OF_bullet
		NOT = { check_variable = { bullet < amount_of_bullet_to_check } }
	}
}

# example usage:
## set_temp_variable = { amount_of_bullet_to_check = 100 }
## has_less_than_specific_amount_of_bullet = yes
has_less_than_specific_amount_of_bullet = {
	custom_trigger_tooltip = {
		tooltip = HAS_LESS_THAN_SPECIFIC_AMOUNT_OF_bullet
		check_variable = { bullet < amount_of_bullet_to_check }
	}
}

# example usage:
## has_balance_in_positive = yes
has_balance_in_positive = {
	custom_trigger_tooltip = {
		tooltip = HAS_BALANCE_IN_POSITIVE
		calculate_bullet_balance = yes
		check_variable = { bullet > 0 }
	}
}

# example usage:
## has_balance_in_negative = yes
has_balance_in_negative = {
	custom_trigger_tooltip = {
		tooltip = HAS_BALANCE_IN_NEGATIVE
		calculate_bullet_balance = yes
		check_variable = { bullet < 0 }
	}
}

# example usage:
## set_temp_variable = { income_value = 1 }
## has_more_than_income = yes
has_more_than_income = {
	custom_trigger_tooltip = {
		tooltip = HAS_MORE_THAN_INCOME
		calculate_bullet_balance = yes
		check_variable = { income_value < total_balance_temp }
	}
}

# example usage:
## calculate_bullet_balance = yes
calculate_bullet_balance = {
	set_temp_variable = { total_balance_temp = 0 }

	# Income:
	calculate_bullet_income = yes
	# Expenses:
	calculate_bullet_expenses = yes

	# Balance:
	add_to_temp_variable = { total_balance_temp = total_income_temp }
	add_to_temp_variable = { total_balance_temp = total_expenses_temp }
}

# example usage:
## calculate_bullet_income = yes
calculate_bullet_income = {
	set_temp_variable = { total_income_temp = 0 }

	# Taxes
	set_temp_variable = { income_from_our_taxes = 0 }
	set_temp_variable = { income_from_our_taxes_core = 0 }
	set_temp_variable = { income_from_our_taxes_non_core = 0 }
	hidden_trigger = {
		all_owned_state = {
			OR = {
				AND = {
					is_core_of = PREV
					add_to_temp_variable = { income_from_our_taxes_core = state_population }
				}
				AND = {
					NOT = { is_core_of = PREV }
					add_to_temp_variable = { income_from_our_taxes_non_core = state_population }
				}
			}
		}
	}
	divide_temp_variable = { income_from_our_taxes_core = 10 }
	divide_temp_variable = { income_from_our_taxes_non_core = 20 }
	add_to_temp_variable = { income_from_our_taxes = income_from_our_taxes_core }
	add_to_temp_variable = { income_from_our_taxes = income_from_our_taxes_non_core }
	if = {
		limit = {
			check_variable = { income_from_our_taxes < 0 }
		}
		set_temp_variable = { income_from_our_taxes = 2147483 }
	}

	# Tax Affecting Modifiers:
	set_temp_variable = { taxes_income_modifier = 1  }
	add_to_temp_variable = { taxes_income_modifier = modifier@tax_efficiency_modifier  }
	#multiply_temp_variable = { consumer_goods_income_modifier = 1 }
	multiply_temp_variable = { income_from_our_taxes = taxes_income_modifier }
	add_to_temp_variable = { total_income_temp = income_from_our_taxes }

	# Active Factories 
	set_temp_variable = { income_from_our_free_civilian_factories = num_of_civilian_factories_available_for_projects }
	multiply_temp_variable = { income_from_our_free_civilian_factories = 2 }

	# Active Modifier:
	set_temp_variable = { free_factory_income_modifier = 1  }
	add_to_temp_variable = { free_factory_income_modifier = modifier@free_factories_income_factor  }
	#multiply_temp_variable = { consumer_goods_income_modifier = 1 }
	multiply_temp_variable = { income_from_our_free_civilian_factories = free_factory_income_modifier }
	add_to_temp_variable = { total_income_temp = income_from_our_free_civilian_factories }


	# Consumer Goods Factories:
	set_temp_variable = { income_from_our_consumer_goods_factories = num_of_civilian_factories }
	subtract_from_temp_variable = { income_from_our_consumer_goods_factories = num_of_civilian_factories_available_for_projects }
	#round_temp_variable = income_from_our_consumer_goods_factories
	if = {
		limit = { check_variable = { income_from_our_consumer_goods_factories < 0 } }
		set_temp_variable = { income_from_our_consumer_goods_factories = 0 }
	}
	multiply_temp_variable = { income_from_our_consumer_goods_factories = 2 }

	# Consumer Goods Modifier:
	set_temp_variable = { consumer_goods_income_modifier = 1  }
	add_to_temp_variable = { consumer_goods_income_modifier = modifier@consumer_goods_income_factor  }
	#multiply_temp_variable = { consumer_goods_income_modifier = 1 }
	multiply_temp_variable = { income_from_our_consumer_goods_factories = consumer_goods_income_modifier }
	add_to_temp_variable = { total_income_temp = income_from_our_consumer_goods_factories }

	# Exports 
	set_temp_variable = { income_from_exports_temp = 0 }

	add_to_temp_variable = { income_from_exports_temp = resource_exported@scrap }
	add_to_temp_variable = { income_from_exports_temp = resource_exported@alloys }
	add_to_temp_variable = { income_from_exports_temp = resource_exported@electronics }
	add_to_temp_variable = { income_from_exports_temp = resource_exported@components }
	add_to_temp_variable = { income_from_exports_temp = resource_exported@chemicals }
	add_to_temp_variable = { income_from_exports_temp = resource_exported@oil }

	## TODO ADD MODIFIER
	add_to_temp_variable = { total_income_temp = income_from_exports_temp }

	# Other Income:
	set_temp_variable = { income_from_other_sources = modifier@bullet_income }
	add_to_temp_variable = { income_from_other_sources = modifier@bullet_income_from_ideas }
	if = {
		limit = {
			check_variable = { income_from_other_sources < 0 }
		}
		set_temp_variable = { income_from_other_sources = 0 }
	}
	add_to_temp_variable = { total_income_temp = income_from_other_sources }

	# Income Affecting Modifiers:
	calculate_bullet_income_modifiers = yes
}

# example usage:
## calculate_bullet_income_modifiers = yes
calculate_bullet_income_modifiers = {
	# Calculation:
	set_temp_variable = { income_modifier_calculation = 1 }

	# Other Sources:
	add_to_temp_variable = { income_modifier_calculation = modifier@bullet_income_factor }

	if = {
		limit = {
			check_variable = { income_modifier_calculation < 0 }
		}
		set_temp_variable = { income_modifier_calculation = 0 }
	}
	multiply_temp_variable = { total_income_temp = income_modifier_calculation }

	# Setting Display Variable:
	set_temp_variable = { income_modifier = modifier@bullet_income_factor }
	set_temp_variable = { income_modifier_from_ideas = modifier@bullet_income_factor_from_ideas }
	set_temp_variable = { income_modifier_from_decisions = modifier@bullet_income_factor_from_decisions }
	set_temp_variable = { income_modifier_from_other = income_modifier }
	subtract_from_temp_variable = { income_modifier_from_other = income_modifier_from_ideas }
	subtract_from_temp_variable = { income_modifier_from_other = income_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { income_modifier < -1 }
		}
		set_temp_variable = { income_modifier = -1 }
	}
}

# example usage:
## calculate_bullet_expenses = yes
calculate_bullet_expenses = {
	set_temp_variable = { total_expenses_temp = 0 }
	# Army Spending:
	set_temp_variable = { expenses_from_our_army_spending = num_battalions }
	multiply_temp_variable = { expenses_from_our_army_spending = -2 }
	# Add +1 for Spec ops, & other forces
	subtract_from_temp_variable = { expenses_from_our_army_spending = num_battalions_with_type@special_forces }
	subtract_from_temp_variable = { expenses_from_our_army_spending = num_battalions_with_type@regulars }

	# Army Spending Modifiers:
	set_temp_variable = { army_spending_modifier = 1 }
	add_to_temp_variable = { army_spending_modifier = modifier@army_spending_cost_factor  }
	multiply_temp_variable = { army_spending_modifier = 1 }
	multiply_temp_variable = { expenses_from_our_army_spending = army_spending_modifier }
	add_to_temp_variable = { total_expenses_temp = expenses_from_our_army_spending }

	# Used Military Factories // Technicians Cost:
	set_temp_variable = { expenses_from_our_used_mil_factories = num_of_military_factories }
	subtract_from_temp_variable = { expenses_from_our_used_mil_factories = num_of_available_military_factories }
	round_temp_variable = expenses_from_our_used_mil_factories
	multiply_temp_variable = { expenses_from_our_used_mil_factories = -5 }

	# Military Spending Modifiers:
	set_temp_variable = { military_spending_modifier = 1 }
	add_to_temp_variable = { military_spending_modifier = modifier@military_spending_cost_factor  }
	multiply_temp_variable = { military_spending_modifier = 1 }
	multiply_temp_variable = { expenses_from_our_used_mil_factories = military_spending_modifier }
	add_to_temp_variable = { total_expenses_temp = expenses_from_our_used_mil_factories }


	# Imports
	set_temp_variable = { expenses_from_imports_temp = 0 }

	add_to_temp_variable = { expenses_from_imports_temp = resource_imported@scrap }
	add_to_temp_variable = { expenses_from_imports_temp = resource_imported@alloys }
	add_to_temp_variable = { expenses_from_imports_temp = resource_imported@electronics }
	add_to_temp_variable = { expenses_from_imports_temp = resource_imported@components }
	add_to_temp_variable = { expenses_from_imports_temp = resource_imported@chemicals }
	add_to_temp_variable = { expenses_from_imports_temp = resource_imported@oil }

	## TODO ADD MODIFIER
	multiply_temp_variable = { expenses_from_imports_temp = -1 }
	add_to_temp_variable = { total_expenses_temp = expenses_from_imports_temp }

	# Other Income:
	set_temp_variable = { expenses_from_other_sources = modifier@bullet_expense }
	add_to_temp_variable = { expenses_from_other_sources = modifier@bullet_expense_from_ideas }
	if = {
		limit = {
			check_variable = { expenses_from_other_sources < 0 }
		}
		set_temp_variable = { expenses_from_other_sources = 0 }
	}
	add_to_temp_variable = { total_expenses_temp = expenses_from_other_sources }

	# Expenses Affecting Modifiers:
	#calculate_bullet_expenses_modifiers = yes
}

# example usage:
## calculate_bullet_expenses_modifiers = yes
calculate_bullet_expenses_modifiers = {
	# Setting Display Variable:
	set_temp_variable = { expenses_modifier = modifier@bullet_expenses_factor }
	set_temp_variable = { expenses_modifier_from_other = expenses_modifier }
	subtract_from_temp_variable = { expenses_modifier_from_other = expenses_modifier_from_ideas }
	subtract_from_temp_variable = { expenses_modifier_from_other = expenses_modifier_from_decisions }
	if = {
		limit = {
			check_variable = { expenses_modifier < -1 }
		}
		set_temp_variable = { expenses_modifier = -1 }
	}
}